swagger: "2.0"
info:
  description: "This is a sample server TaskTracker server.  You can find out git repository: https://github.com/artembelmeha/taskTracker"
  version: "1.0.0"
  title: "Swagger TaskTracker"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "belmeha.a.v@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/"
schemes:
- "http"
host: localhost:8080
tags:
  - name: "Tasks"
    description: "Operations about Task"
    externalDocs:
      description: "Find out more about Task"
      url: "http://swagger.io/"
  - name: "Users"
    description: "Operations about User"
    externalDocs:
      description: "Find out more about User"
      url: "http://swagger.io/"
paths:
  /tasks:
    post:
      tags:
        - "Tasks"
      summary: "Add a new task"
      description: ""
      operationId: "addTask"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "query"
          description: "userId define User who will be owner of this task"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Task object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Task"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"

    put:
      tags:
        - "Tasks"
      summary: "Update task"
      operationId: "updateTask"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "query"
          description: "userId define User who will be owner of this task after update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
    get:
      tags:
        - "Tasks"
      summary: "Get all task"
      operationId: "getAllTask"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "query"
          description: "userId define User whose  task to return otherwise return all task"
          required: false
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"

  /tasks/{taskId}:
    get:
      tags:
        - "Tasks"
      summary: "Get task by taskId"
      operationId: "getTaskByTaskId"
      produces:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
    delete:
      tags:
        - "Tasks"
      summary: "Delete task by taskId"
      operationId: "deleteTask"
      produces:
        - "application/json"
      parameters:
        - name: "taskId"
          in: "path"
          description: "ID of task to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "User not found"

  /users:
    post:
      tags:
        - "Users"
      summary: "Add a new user"
      description: ""
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
    put:
      tags:
        - "Users"
      summary: "Update existing new user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
    get:
      tags:
        - "Users"
      summary: "Get all user"
      operationId: "getAllUser"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"


  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: "Get user by userId"
      operationId: "getUserByUserId"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

    delete:
      tags:
        - "Users"
      summary: "Delete user by userId"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  Task:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      priority:
        type: "string"
        enum: [LOW, MEDIUM, HIGH]
      title:
        type: "string"
      createdAt:
        type: "string"
        format: "date"
        example: "2021-10-31 14:19:42.000000"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
